import java.util.*;
class Student
{
  int rollno;
  String name;
  int mark1 = 0;
  int mark2 = 0;
  int mark3 = 0;
  int mark4 = 0;
  int mark5 = 0;
  int mark6 = 0;
  static int rank = 0;
  int total;
  float average = 0.0f;
    Student (int a, String b, int c, int d, int e, int f, int g, int h)
  {
    this.rollno = a;
    this.name = b;
    this.mark1 = c;
    this.mark2 = d;
    this.mark3 = e;
    this.mark4 = f;
    this.mark5 = g;
    this.mark6 = h;
    this.total = c + d + e + f + g + h;
    this.average = total / 6;
   
  }
  public int gettotal ()
  {
    return Math.round (total);
  }
  public String getname ()
  {
    return name;
  }
  public int getroll ()
  {
    return rollno;
  }
  
  public int getMark1()
  {
    return mark1;
  }
  public int getMark2()
  {
    return mark2;
    
  }
  public int getMark3()
  {
    return mark3;
  }
  public int getMark4()
  {
    return mark4;
  
  } 
  public int getMark5()
  {
    return mark5;
  }
  public int getMark6()
  {
    return mark6;
  }
  @Override public String toString ()
  {

    return
    "Sudentdetails:[rank=" + (rank =rank + 1) 
     + ",name=" + name 
     + ",rollno=" + rollno 
     + ",total=" + total 
     + ",rollno=" + rollno
     + ",total=" + total 
     + ",rollno=" + rollno 
     + ",mark1=" + mark1 
     + ",mark2=" + mark2 
     + ",mark3=" + mark3  
     + ",mark4=" + mark4  
     + ",mark5=" + mark5  
     + ",mark6=" + mark6  
     + ",average=" + Math.round (average) 
     + "]\n";
  }
}

class Mytotal implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.gettotal () < s2.gettotal ())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}

class MyMark1 implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark1() < s2.getMark1())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
  
}

class MyMark2  implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark2() < s2.getMark2())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}

class MyMark3  implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark3() < s2.getMark3())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}

class MyMark4  implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark4() < s2.getMark4())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}

class MyMark5  implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark5() < s2.getMark5())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}

class MyMark6  implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {
    if (s1.getMark6() < s2.getMark6())
      {
	return 1;
      }
    else
      {
	return -1;
      }

  }
}


class Name implements Comparator < Student >
{
  @Override 
  public int compare (Student s1, Student s2)
  {

    return s1.getname ().compareTo (s2.getname ());
  }
}

public class Main
{
  public static void main (String[]args)
  {
    Scanner scan = new Scanner (System.in);
      System.out.println ("enter the no of student details;");
    int limit = scan.nextInt ();
    int roll;
      Set < Student > set =
      new TreeSet <> (new Mytotal ().thenComparing (new Name ()));
    int i = 0;
    int no;
    do
      {
	System.out.println ("Enter " + (++i) + "  student details");
	System.out.println("rollno | name | Mark1  |Mark2 |Mark3 |Mark4 |Mark5 |Mark6 ");
	int rollno = scan.nextInt();
	String name = scan.next();
	int mark1 = scan.nextInt();
	int mark2 = scan.nextInt();
	int mark3 = scan.nextInt();
	int mark4 = scan.nextInt();
	int mark5 = scan.nextInt();
	int mark6 = scan.nextInt();
 	  Student st = new Student (rollno, name, mark1, mark2, mark3, mark4, mark5, mark6);
	  set.add (st);
      }
    while (i < limit);
    System.out.println ("studentdetails(sorted based on total and name):");
    Iterator Itr =set.iterator ();
    while (Itr.hasNext ())
      {
	System.out.print (Itr.next());
      }
    System.out.println ();
    System.out.println ("Enter the rollnumber to be searched:");
    roll = scan.nextInt ();
    
    Iterator Itr2 = set.iterator ();
    while (Itr2.hasNext ())
      {
	Student stud = (Student) Itr2.next ();
	if ((stud.getroll ()) == (roll))
	  System.out.println ("rollno :" + stud.getroll () + "|" + "name:" +
			      stud.getname ());

      }
    
    System.out.println ();
    System.out.println ("Enter the Subject to be searched:");
    System.out.println ("1.mark1 |2.mark2  |3.mark3  |4.mark4  |5.mark5  |6.mark6 ");
    no = scan.nextInt ();
    scan.close();
    switch(no){
        case 1:
            Set < Student > set1=new TreeSet <>(new MyMark1());
            set1.addAll(set);
            set.clear();
            set.addAll(set1);
            break;
        case 2:
            Set < Student > set2=new TreeSet <>(new MyMark2());
            set2.addAll(set);
            set.clear();
            set.addAll(set2);
            break;
        case 3:
            Set < Student > set3=new TreeSet <>(new MyMark3());
            set3.addAll(set);
             set.clear();
            set.addAll(set3);
            break;
        case 4:
            Set < Student > set4=new TreeSet <>(new MyMark4()) ;
            set4.addAll(set);
             set.clear();
            set.addAll(set4);
            break;
        case 5:
            Set < Student >set5=new TreeSet <>(new MyMark5()) ;
            set5.addAll(set);
             set.clear();
            set.addAll(set5);
            break;
        case 6:
            Set < Student > set6=new TreeSet <>(new MyMark6());
            set6.addAll(set);
             set.clear();
            set.addAll(set6);
            break;
        default:
            System.out.println("wrong subject no!");
    }
   Iterator Itr3 = set.iterator ();
   while (Itr3.hasNext ())
      {
	System.out.print (Itr3.next());
      }

  }
}
